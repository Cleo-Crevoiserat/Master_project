#include <iostream>
#include <vector>
#include <algorithm>
#include "gurobi_c++.h"
#include <chrono>
#include <cmath>
#include "Construction_Allocation.h"
#include "Useful_fct.h"
#include "Construction_Part_1.h"
#include "Solve_6.h"
using namespace std;

int main(){
    GRBEnv env = GRBEnv(true);
    env.set(GRB_IntParam_InfUnbdInfo, 1);
    env.start();
    int prob = 1;// here chose either 0 or 1
    if (prob == 0) {// you want to solve Wx<=b 
        int m = 2;//you give the number of rows of your matrix
        int n = 1;//you give the number of columns of your matrix
        Eigen::MatrixXd W(2,1);//you define your matrix
        W << -1,
            -2;
        //cout << W;
        vector<vector<double>> Q;// you define Q
        Q= {
            {1,-1,0}
        };
        Main(Q, W, n, m);
    }
    if (prob == 1) {// you want to solve a fair allocation problem
        int nb_agent = 4;
        int nb_object = 4;
        Eigen::VectorXd N(nb_object);// define the nuber of item per object
        vector< vector < vector<int>>> Utility_list;
        Utility_list = {{ {400, 100, 240, 260}, {320, 140, 280, 260}, {240, 260, 260, 240}, {200, 300, 240, 260} },
        { {390, 90, 270, 250}, {330, 130, 280, 260}, {250, 250, 250, 250}, {210, 290, 240, 260} },
        { {351, 471, 178, 0}, {0, 0, 0, 1000}, {502, 498, 0, 0}, {0, 997, 3, 0} },
        { {1000, 0, 0, 0}, {0, 0, 0, 1000}, {750, 250, 0, 0}, {0, 1000, 0, 0} },
        { {421, 439, 26, 114}, {335, 0, 340, 325}, {0, 354, 417, 229}, {250, 250, 250, 250} },
        { {167, 500, 333, 0}, {167, 500, 333, 0}, {0, 333, 500, 167}, {0, 333, 500, 167} },
        { {551, 276, 140, 33}, {1000, 0, 0, 0}, {520, 0, 83, 397}, {541, 66, 286, 107} },
        { {968, 0, 0, 32}, {1000, 0, 0, 0}, {520, 0, 83, 397}, {541, 66, 286, 107} },
        { {1000, 0, 0, 0}, {480, 485, 35, 0}, {0, 500, 500, 0}, {900, 100, 0, 0} },
        { {480, 242, 151, 127}, {228, 117, 348, 307}, {32, 130, 838, 0}, {230, 231, 231, 308} },
        { {191, 274, 280, 255}, {158, 298, 198, 346}, {280, 163, 383, 174}, {282, 170, 85, 463} },
        { {361, 90, 390, 159}, {565, 435, 0, 0}, {591, 110, 0, 299}, {1000, 0, 0, 0} },
        { {600, 200, 100, 100}, {200, 100, 700, 0}, {0, 0, 1000, 0}, {400, 50, 500, 50} },
        { {559, 55, 199, 187}, {681, 225, 94, 0}, {0, 112, 162, 726}, {189, 111, 97, 603} },
        { {559, 55, 199, 187}, {681, 225, 94, 0}, {0, 112, 162, 726}, {189, 111, 97, 603} },
        { {284, 227, 237, 252}, {832, 0, 168, 0}, {0, 0, 0, 1000}, {469, 0, 0, 531} },
        { {250, 250, 250, 250}, {201, 298, 501, 0}, {498, 498, 2, 2}, {0, 500, 0, 500} },
        { {250, 250, 250, 250}, {250, 250, 250, 250}, {250, 250, 250, 250}, {250, 250, 250, 250} },
        { {750, 0, 0, 250}, {200, 450, 350, 0}, {200, 0, 800, 0}, {100, 200, 0, 700} },
        { {1, 333, 333, 333}, {278, 0, 361, 361}, {492, 508, 0, 0}, {201, 320, 479, 0} },
        { {0, 524, 20, 456}, {213, 277, 258, 252}, {0, 665, 0, 335}, {0, 436, 232, 332} },
        { {300, 300, 300, 100}, {300, 300, 300, 100}, {350, 350, 250, 50}, {300, 300, 250, 150} },
        { {100, 200, 10, 690}, {200, 200, 0, 600}, {100, 100, 0, 800}, {70, 230, 20, 680} },
        { {151, 333, 364, 152}, {270, 203, 363, 164}, {287, 263, 240, 210}, {251, 287, 440, 22} }
    }
        ;
        vector<double> Time;
        for (vector < vector<int>> Utility : Utility_list) {
            N << 1,1,1,1; 
            N =  N;
            //vector < vector<int>> Utility_1 = {{219, 117, 430, 234}, {116, 295, 589, 0}, };
            //vector < vector<int>> Utility = { { 257, 265, 119, 208, 130, 21 }, { 516, 75, 96, 128, 103, 82 }, { 69, 272, 180, 134, 274, 71 }, { 32, 297, 379, 190, 75, 27 } }; //1000 ans
            //vector < vector<int>> Utility_1 = { { 214, 154, 259, 8, 265, 100 }, { 350, 349, 83, 19, 100, 99 }, { 210, 346, 107, 23, 113, 201 } }; //117-242
            //vector < vector<int>> Utility_1 = { {199, 204, 201, 205, 97, 94}, {178, 356, 70, 145, 182, 69}, {180, 273, 179, 182, 70, 116} };// you define your utility function
            //vector < vector<int>> Utility_1 = { {131, 218, 217, 130, 217,  87}, {197, 174, 151, 141, 233, 104}, {81, 231, 296, 198, 150,  44} }; //70-35// you define your utility function
            Time.push_back(Main_alloc(Utility, nb_object, nb_agent, N));
            //cout << Time[0];
        }
        cout << endl;
        for (auto t : Time) {
            cout << t <<","<< endl;
        }
    }
    return 0;
}